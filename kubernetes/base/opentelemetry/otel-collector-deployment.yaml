apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector
  namespace: n8n
  labels:
    app: otel-collector
spec:
  replicas: 2
  selector:
    matchLabels:
      app: otel-collector
  template:
    metadata:
      labels:
        app: otel-collector
    spec:
      containers:
      - name: otel-collector
        image: otel/opentelemetry-collector:0.81.0
        ports:
        - containerPort: 4317 # OTLP gRPC
          name: otlp-grpc
        - containerPort: 4318 # OTLP HTTP
          name: otlp-http
        - containerPort: 8888 # Prometheus metrics
          name: metrics
        volumeMounts:
        - name: config
          mountPath: /conf
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        resources:
          limits:
            cpu: 1
            memory: 2Gi
          requests:
            cpu: 200m
            memory: 400Mi
      volumes:
      - name: config
        configMap:
          name: otel-collector-config
---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  namespace: n8n
spec:
  ports:
  - name: otlp-grpc
    port: 4317
    protocol: TCP
    targetPort: 4317
  - name: otlp-http
    port: 4318
    protocol: TCP
    targetPort: 4318
  - name: metrics
    port: 8888
    protocol: TCP
    targetPort: 8888
  selector:
    app: otel-collector
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
  namespace: n8n
data:
  config.yaml: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      
      prometheus:
        config:
          scrape_configs:
            - job_name: 'n8n'
              scrape_interval: 10s
              static_configs:
                - targets: ['n8n:5678']
            - job_name: 'vault'
              scrape_interval: 10s
              static_configs:
                - targets: ['vault:8200']
    
    processors:
      batch:
        timeout: 1s
        send_batch_size: 1024
      
      memory_limiter:
        check_interval: 1s
        limit_mib: 1500
      
      resourcedetection:
        detectors: [env, system, kubernetes]
        timeout: 2s
      
      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        extract:
          metadata:
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.namespace.name
            - k8s.node.name
    
    exporters:
      prometheus:
        endpoint: 0.0.0.0:8889
      
      otlp:
        endpoint: "jaeger:4317"
        tls:
          insecure: true
      
      logging:
        loglevel: debug
    
    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [memory_limiter, batch, resourcedetection, k8sattributes]
          exporters: [otlp, logging]
        
        metrics:
          receivers: [otlp, prometheus]
          processors: [memory_limiter, batch, resourcedetection, k8sattributes]
          exporters: [prometheus, logging]
      
      telemetry:
        logs:
          level: "debug"
        metrics:
          address: ":8888" 